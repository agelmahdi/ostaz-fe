/*!
 * Retina.js v1.3.0
 *
 * Copyright 2014 Imulus, LLC
 * Released under the MIT license
 *
 * Retina.js is an open source script that makes it easy to serve
 * high-resolution images to devices with retina displays.
 */
!(function () {
  function a () {}
  function b (a) {
    return f.retinaImageSuffix + a
  }
  function c (a, c) {
    if (((this.path = a || ''), typeof c !== 'undefined' && c !== null)) { (this.at_2x_path = c), (this.perform_check = !1) } else {
      if (void 0 !== document.createElement) {
        const d = document.createElement('a')
        ;(d.href = this.path),
        (d.pathname = d.pathname.replace(g, b)),
        (this.at_2x_path = d.href)
      } else {
        const e = this.path.split('?')
        ;(e[0] = e[0].replace(g, b)), (this.at_2x_path = e.join('?'))
      }
      this.perform_check = !0
    }
  }
  function d (a) {
    ;(this.el = a),
    (this.path = new c(
      this.el.getAttribute('src'),
      this.el.getAttribute('data-at2x')
    ))
    const b = this
    this.path.check_2x_variant(function (a) {
      a && b.swap()
    })
  }
  const e = typeof exports === 'undefined' ? window : exports
  var f = {
    retinaImageSuffix: '@2x',
    check_mime_type: !0,
    force_original_dimensions: !0
  }
  ;(e.Retina = a),
  (a.configure = function (a) {
    a === null && (a = {})
    for (const b in a) { a.hasOwnProperty(b) && (f[b] = a[b]) }
  }),
  (a.init = function (a) {
    a === null && (a = e)
    const b = a.onload || function () {}
    a.onload = function () {
      let a
      let c
      const e = document.getElementsByTagName('img')
      const f = []
      for (a = 0; a < e.length; a += 1) { (c = e[a]), c.getAttributeNode('data-no-retina') || f.push(new d(c)) }
      b()
    }
  }),
  (a.isRetina = function () {
    const a =
        '(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx)'
    return e.devicePixelRatio > 1
      ? !0
      : e.matchMedia && e.matchMedia(a).matches
        ? !0
        : !1
  })
  var g = /\.\w+$/
  ;(e.RetinaImagePath = c),
  (c.confirmed_paths = []),
  (c.prototype.is_external = function () {
    return !(
      !this.path.match(/^https?\:/i) ||
        this.path.match('//' + document.domain)
    )
  }),
  (c.prototype.check_2x_variant = function (a) {
    let b
    const d = this
    return this.is_external()
      ? a(!1)
      : this.perform_check ||
          typeof this.at_2x_path === 'undefined' ||
          this.at_2x_path === null
        ? this.at_2x_path in c.confirmed_paths
          ? a(!0)
          : ((b = new XMLHttpRequest()),
          b.open('HEAD', this.at_2x_path),
          (b.onreadystatechange = function () {
            if (b.readyState !== 4) { return a(!1) }
            if (b.status >= 200 && b.status <= 399) {
              if (f.check_mime_type) {
                const e = b.getResponseHeader('Content-Type')
                if (e === null || !e.match(/^image/i)) { return a(!1) }
              }
              return c.confirmed_paths.push(d.at_2x_path), a(!0)
            }
            return a(!1)
          }),
          b.send(),
          void 0)
        : a(!0)
  }),
  (e.RetinaImage = d),
  (d.prototype.swap = function (a) {
    function b () {
      c.el.complete
        ? (f.force_original_dimensions &&
              (c.el.setAttribute('width', c.el.offsetWidth),
              c.el.setAttribute('height', c.el.offsetHeight)),
        c.el.setAttribute('src', a))
        : setTimeout(b, 5)
    }
    typeof a === 'undefined' && (a = this.path.at_2x_path)
    var c = this
    b()
  }),
  a.isRetina() && a.init(e)
})()
